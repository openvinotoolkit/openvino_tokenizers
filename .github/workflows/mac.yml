name: macOS (13, Python 3.11)
on:
  workflow_dispatch:
  pull_request:
  merge_group:
  push:
    branches:
      - master
      - 'releases/**'

concurrency:
  # github.ref is not unique in post-commit
  group: ${{ github.event_name == 'push' && github.run_id || github.ref }}-mac
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.11'
  MACOSX_DEPLOYMENT_TARGET: '11.0'
  OV_BRANCH: ${{ github.base_ref || github.event.merge_group.base_ref || github.ref }}
  OV_TARBALL: ''

permissions: read-all

jobs:
  openvino_download:
    name: Try to download prebuilt OpenVINO
    outputs:
      status: ${{ steps.openvino_download.outcome }}
    timeout-minutes: 10
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-20.04

    steps:
      - name: Download OpenVINO build
        id: openvino_download
        run: |
          wget ${{ env.OV_TARBALL}} --progress=bar:force:noscroll -O openvino_package.tar.gz
          tar -tvf openvino_package.tar.gz
        continue-on-error: true

      #
      # Upload to artifacts
      #

      - name: Upload openvino package
        if: steps.openvino_download.outcome == 'success'
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: openvino_package
          path: openvino_package.tar.gz
          if-no-files-found: 'error'

  openvino_build:
    name: Build OpenVINO
    needs: [openvino_download]
    if: needs.openvino_download.outputs.status != 'success'
    timeout-minutes: 150
    defaults:
      run:
        shell: bash
    runs-on: 'macos-13-large'
    env:
      CMAKE_BUILD_TYPE: 'Release'
      CMAKE_GENERATOR: 'Ninja Multi-Config'
      CMAKE_CXX_COMPILER_LAUNCHER: ccache
      CMAKE_C_COMPILER_LAUNCHER: ccache
      OPENVINO_REPO: ${{ github.workspace }}/openvino
      INSTALL_DIR: ${{ github.workspace }}/openvino/install
      BUILD_DIR: ${{ github.workspace }}/openvino/build

    steps:
      - name: Clone OpenVINO
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: 'openvinotoolkit/openvino'
          path: ${{ env.OPENVINO_REPO }}
          submodules: 'true'
          ref: ${{ env.OV_BRANCH }}

      #
      # Dependencies
      #

      - name: Install build dependencies
        run: brew install coreutils ninja

      - name: Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@f677139bbe7f9c59b41e40162b753c062f5d49a3 # v5.2.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install python dependencies
        run: |
          # For Python API: build and wheel packaging
          python3 -m pip install -r ${OPENVINO_REPO}/src/bindings/python/wheel/requirements-dev.txt

      #
      # Build
      #

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@ed74d11c0b343532753ecead8a951bb09bb34bc9 # v1.2.14
        with:
          max-size: "2000M"
          # Should save cache only if run in the master branch of the base repo
          # github.ref_name is 'ref/PR_#' in case of the PR, and 'branch_name' when executed on push
          save: ${{ github.ref_name == 'master' && 'true' || 'false'  }}
          verbose: 2
          key: ccache-mac
          restore-keys: |
            ccache-mac

      - name: CMake configure - OpenVINO
        run: |
          cmake \
            -G "${{ env.CMAKE_GENERATOR }}" \
            -DENABLE_CPPLINT=OFF \
            -DENABLE_NCC_STYLE=OFF \
            -DENABLE_TESTS=OFF \
            -DENABLE_STRICT_DEPENDENCIES=OFF \
            -DENABLE_SYSTEM_TBB=ON \
            -DENABLE_SYSTEM_OPENCL=ON \
            -DCMAKE_VERBOSE_MAKEFILE=ON \
            -DCPACK_GENERATOR=TGZ \
            -DENABLE_JS=OFF \
            -DENABLE_SAMPLES=OFF \
            -DENABLE_INTEL_NPU=OFF \
            -DENABLE_OV_ONNX_FRONTEND=OFF \
            -DENABLE_OV_PADDLE_FRONTEND=OFF \
            -DENABLE_OV_PYTORCH_FRONTEND=OFF \
            -DENABLE_OV_TF_FRONTEND=ON \
            -DENABLE_OV_TF_LITE_FRONTEND=OFF \
            -DENABLE_INTEL_GPU=OFF \
            -DENABLE_INTEL_NPU=OFF \
            -DCMAKE_COMPILE_WARNING_AS_ERROR=ON \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DENABLE_PYTHON=ON \
            -DENABLE_WHEEL=ON \
            -S ${OPENVINO_REPO} \
            -B ${BUILD_DIR}

      - name: Clean ccache stats
        run: ccache --zero-stats --show-config

      - name: Cmake build - OpenVINO
        run: cmake --build ${BUILD_DIR} --parallel --config ${{ env.CMAKE_BUILD_TYPE }}

      - name: Show ccache stats
        run: ccache --show-stats

      - name: Cmake install - OpenVINO
        run: |
          cmake -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR}/openvino_package -P ${BUILD_DIR}/cmake_install.cmake
          cmake -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR}/openvino_package -DCOMPONENT=python_wheels -P ${BUILD_DIR}/cmake_install.cmake

      - name: Pack Artifacts
        run: |
          pushd ${INSTALL_DIR}
            tar -czvf ${BUILD_DIR}/openvino_package.tar.gz *
          popd

      #
      # Upload build artifacts and logs
      #

      - name: Upload openvino package
        if: ${{ always() }}
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: openvino_package
          path: ${{ env.BUILD_DIR }}/openvino_package.tar.gz
          if-no-files-found: 'error'

  openvino_tokenizers_cpack:
    name: OpenVINO tokenizers cpack (BUILD_FAST_TOKENIZERS=${{ matrix.build_fast_tokenizers }}, BUILD_TYPE=${{ matrix.build_type }})
    strategy:
      matrix:
        build_fast_tokenizers: [ON]
        build_type: [Release] # TODO: Add Debug build when OV provider is ready or use OV package
    needs: [ openvino_download, openvino_build ]
    if: |
      always() &&
      (needs.openvino_download.outputs.status == 'success' || needs.openvino_build.result == 'success')
    timeout-minutes: 45
    defaults:
      run:
        shell: bash
    runs-on: macos-13

    env:
      CMAKE_GENERATOR: 'Ninja'
      OPENVINO_REPO: ${{ github.workspace }}/openvino
      INSTALL_DIR: ${{ github.workspace }}/openvino/install
      OV_TOKENIZERS_INSTALL_DIR: ${{ github.workspace }}/openvino_tokenizers/install
      OPENVINO_TOKENIZERS_REPO: ${{ github.workspace }}/openvino_tokenizers
      BUILD_DIR: ${{ github.workspace }}/openvino_tokenizers/build

    steps:
      - name: Clone Openvino tokenizers
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          path: ${{ env.OPENVINO_TOKENIZERS_REPO }}

      - name: Download OpenVINO package
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: openvino_package
          path: ${{ env.INSTALL_DIR }}

      - name: Extract OpenVINO packages
        run: |
          pushd ${INSTALL_DIR}
            tar -xzf openvino_package.tar.gz -C ${INSTALL_DIR} --strip-components=1
          popd

      #
      # Build
      #
      - name: Install build dependencies
        run: brew install coreutils ninja

      - name: CMake configure - tokenizers
        run: |
          source ${INSTALL_DIR}/setupvars.sh
          cmake -DBUILD_FAST_TOKENIZERS="${{ matrix.build_fast_tokenizers }}" \
                -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                -S ${{ env.OPENVINO_TOKENIZERS_REPO }} \
                -B ${{ env.BUILD_DIR }}

      - name: Cmake build - tokenizers
        run: cmake --build ${{ env.BUILD_DIR }} --parallel --config ${{ matrix.build_type }} --verbose
        env:
          CMAKE_BUILD_PARALLEL_LEVEL: '4'

      - name: Cmake install - tokenizers
        run: |
          cmake --install ${{ env.BUILD_DIR }} --config=${{ matrix.build_type }} --prefix=${{ env.OV_TOKENIZERS_INSTALL_DIR }}/ov_tokenizers

      - name: Pack Artifacts
        run: |
          pushd ${OV_TOKENIZERS_INSTALL_DIR}
            tar -czvf ${BUILD_DIR}/ov_tokenizers.tar.gz *
          popd

      #
      # Upload build artifacts
      #

      - name: Upload openvino tokenizers package
        if: ${{ always() }}
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: openvino_tokenizers_cpack_${{ matrix.build_fast_tokenizers }}_${{ matrix.build_type }}
          path: ${{ env.BUILD_DIR }}/*.tar.gz
          if-no-files-found: 'error'

  openvino_tokenizers_wheel:
    name: OpenVINO tokenizers extension
    needs: [ openvino_download, openvino_build ]
    if: |
      always() &&
      (needs.openvino_download.outputs.status == 'success' || needs.openvino_build.result == 'success')
    timeout-minutes: 25
    defaults:
      run:
        shell: bash
    runs-on: macos-13

    env:
      OPENVINO_REPO: ${{ github.workspace }}/openvino
      INSTALL_DIR: ${{ github.workspace }}/openvino/install
      OPENVINO_TOKENIZERS_REPO: ${{ github.workspace }}/openvino_tokenizers
      BUILD_DIR: ${{ github.workspace }}/openvino_tokenizers/build

    steps:
      - name: Clone Openvino tokenizers
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          path: ${{ env.OPENVINO_TOKENIZERS_REPO }}

      - name: Clone Openvino
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: 'openvinotoolkit/openvino'
          path: ${{ env.OPENVINO_REPO }}
          ref: ${{ env.OV_BRANCH }}
          sparse-checkout: |
            install_build_dependencies.sh

      - name: Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@f677139bbe7f9c59b41e40162b753c062f5d49a3 # v5.2.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Download OpenVINO package
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: openvino_package
          path: ${{ env.INSTALL_DIR }}

      - name: Extract OpenVINO packages
        run: |
          pushd ${INSTALL_DIR}
            tar -xzf openvino_package.tar.gz -C ${INSTALL_DIR} --strip-components=1
          popd

      #
      # Dependencies
      #

      - name: Install build dependencies
        run: brew install coreutils ninja

      #
      # Build
      #

      - name: Build tokenizers wheel
        run: |
          python3 -m pip wheel -v --no-deps --wheel-dir ${BUILD_DIR} \
              --config-settings=override=cross.arch="macosx_10_12_x86_64" \
              --find-links ${INSTALL_DIR}/wheels \
              ${OPENVINO_TOKENIZERS_REPO}
        env:
          CMAKE_BUILD_PARALLEL_LEVEL: '4'

      #
      # Upload build artifacts
      #

      - name: Upload openvino tokenizers wheel
        if: ${{ always() }}
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: openvino_tokenizers_wheel
          path: ${{ env.BUILD_DIR }}/*.whl
          if-no-files-found: 'error'

  openvino_tokenizers_tests:
    name: OpenVINO tokenizers tests
    needs: [ openvino_download, openvino_build, openvino_tokenizers_wheel]
    if: always() && needs.openvino_tokenizers_wheel.result == 'success'
    timeout-minutes: 40
    defaults:
      run:
        shell: bash
    runs-on: macos-13

    env:
      OPENVINO_REPO: ${{ github.workspace }}/openvino
      INSTALL_DIR: ${{ github.workspace }}/openvino/install
      OPENVINO_TOKENIZERS_REPO: ${{ github.workspace }}/openvino_tokenizers
      BUILD_DIR: ${{ github.workspace }}/openvino_tokenizers/build

    steps:
      - name: Clone Openvino tokenizers sources and tests
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          path: ${{ env.OPENVINO_TOKENIZERS_REPO }}

      - name: Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@f677139bbe7f9c59b41e40162b753c062f5d49a3 # v5.2.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Download tokenizers package
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: openvino_tokenizers_wheel
          path: ${{ env.INSTALL_DIR }}/ov_tokenizers

      - name: Download OpenVINO package
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: openvino_package
          path: ${{ env.INSTALL_DIR }}

      - name: Extract OpenVINO packages
        run: |
          pushd ${INSTALL_DIR}
            tar -xzf openvino_package.tar.gz -C ${INSTALL_DIR} --strip-components=1
          popd

      - name: Install OpenVINO Python wheel
        if: needs.openvino_build.result == 'success'
        run: |
          # Find and install wheel
          pushd ${INSTALL_DIR}/wheels
            wheel_name=$(find . -name 'openvino-*.whl')
            python3 -m pip install $wheel_name
          popd

      - name: Install OpenVINO tokenizers wheel
        run: |
          # Find and install wheel
          pushd ${INSTALL_DIR}/ov_tokenizers
            wheel_name=$(find . -name 'openvino_tokenizers*.whl')
            python3 -m pip install $wheel_name[dev]
          popd
        env:
          PIP_EXTRA_INDEX_URL: "https://download.pytorch.org/whl/cpu"

      - name: Tokenizers regression tests (using openvino python modules)
        if: needs.openvino_download.outputs.status == 'success'
        run: |
          source ${INSTALL_DIR}/setupvars.sh
          python3 -m pytest tokenizers_test.py
        working-directory: ${{ env.OPENVINO_TOKENIZERS_REPO }}/tests

      - name: Tokenizers regression tests (using openvino python wheel)
        if: needs.openvino_build.result == 'success'
        run: |
          python3 -m pytest tokenizers_test.py
        working-directory: ${{ env.OPENVINO_TOKENIZERS_REPO }}/tests
